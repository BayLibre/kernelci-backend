Kernel CI Backend
=================

Backend engine, Tornado powerd, for the Kernel CI reporting dashboard.

Requirements
============

Non exhaustive list of requirements is in the 'requirements.txt' file: those
need to be installed via pip.

For the rest of the necessary packages, see the ansible playbook.

Tests
=====

From the 'app/' folder, run:

  python -m unittest discover

Run the server
==============

From the 'app/' folder, run:

  python server.py


The Celery worker
-----------------

To run external tasks, Celery is used. It will start automatically at boot
time. In the ansible playbook, there is the upstart configuration file to be
used.

It is possible to pass an external configuration file (key=value) using an
environment variable: CELERY_CONFIG_MODULE.

To manually run it, from the 'app/' folder, run:

  celery worker --autoscale=10,0 --app=taskqueue --loglevel=INFO

At the moment the Celery worker is based on redis.io: it needs to be installed
as well to make it work.

There is support for MongoDB as well, but is still experimental and has not been
tested yet with this application.


Basic interactions
==================

GET
---

  curl localhost:8888/api/job
  curl localhost:8888/api/defconfig

  curl localhost:8888/api/job/$JOB_ID
  curl localhost:8888/api/defconfig/$DEFCONF_ID

  curl localhost:8888/api/job?limit=40
  curl localhost:8888/api/job?limit=40&skip=20

POST
----

This command will tell the application to parse the directory located at
'stable/v3.12.14' and import everything there.

  curl -X POST -H "Content-Type: application/json" -H "X-XSRF-Header: foo" -d '{"job": "stable", "kernel": "v3.12.14"}' localhost:8888/api/job

The content of the `X-XSFR-Header` is not important at the moment. All requests
without that header will be discarded though.

Manul import of all data
------------------------

From the 'app/' directory run:

  python -m utils.docimport
